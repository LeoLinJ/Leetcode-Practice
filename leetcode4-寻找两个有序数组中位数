"""
Median-of-Two-Sorted-Arrays
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))，可以假设 nums1 和 nums2 不会同时为空。
"""
class Solution:
    # def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
    def findMedianSortedArrays(self, nums1: [int], nums2: [int]) -> float:
        m,n = len(nums1), len(nums2)
        if m > n: #保持 n始终大于m 避免做重复决定
            nums1, nums2, m, n = nums2, nums1, n, m
        if n == 0: #即都是空列表
            return None
        imin, imax, half_l = 0, m, (m+n+1)//2 #定义half_l主要是减少j的重复运算量
        while imin <= imax:
            i = (imin+imax)//2 #遵循二分法从中间开始查找
            j = half_l - i
            if i<m and nums2[j-1]>nums1[i]:
                imin = i + 1 #保证该循环在每次循环的时候能够减少为一半
            elif i>0 and nums1[i-1]>nums2[j]:
                imax = i - 1
            else: #i is good 即找到了len(left)==len(right)且满足左边列表部分小于右边
                if i == 0: max_of_left = nums2[j-1]
                elif j == 0: max_of_left = nums1[i-1]
                else: max_of_left = max(nums1[i-1], nums2[j-1])

                if (m+n)%2 == 1:
                    return max_of_left #return即返回并停止函数调用
                
                if i == m: min_of_right = nums2[j]
                elif j == n: min_of_right = nums1[i]
                else: min_of_right = min(nums1[i], nums2[j])

                return(max_of_left + min_of_right) / 2.0

if __name__ == '__main__':
    A = [1,2]
    B = [3,4]
    target = Solution.findMedianSortedArrays('',A,B)
    print(target)

# 不考虑复杂度：
# class Solution:
#     def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
#         cur = nums1 + nums2 #合并列表
#         cur.sort()
#         a = len(cur)
#         if a % 2 != 0:
#             x = cur[a//2]
#         else:
#             b = int(a/2)
#             x = cur[b] + cur[b-1] #list must be integer or slices not float
#             x = x/2
#         return x
